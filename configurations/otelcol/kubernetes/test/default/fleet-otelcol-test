apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  finalizers:
    - opentelemetrycollector.opentelemetry.io/finalizer
  generation: 1
  labels:
    app: fleet-otelcol-test
    app.kubernetes.io/managed-by: opentelemetry-operator
    k8s-app: fleet-otelcol-test
    opentelemetry.io/opamp-managed: "true"
  name: fleet-otelcol-test
  namespace: default
spec:
  args:
    feature-gates: -component.UseLocalHostAsDefaultHost
  config:
    exporters:
      logging:
        verbosity: detailed
    extensions:
      health_check: {}
      pprof:
        endpoint: 0.0.0.0:1777
      zpages:
        endpoint: 0.0.0.0:55679
    processors:
      batch: {}
    receivers:
      jaeger:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          thrift_binary:
            endpoint: 0.0.0.0:6832
          thrift_compact:
            endpoint: 0.0.0.0:6831
          thrift_http:
            endpoint: 0.0.0.0:14268
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      prometheus:
        config:
          scrape_configs:
            - job_name: otel-collector
              scrape_interval: 10s
              static_configs:
                - targets:
                    - 0.0.0.0:8888
      zipkin:
        endpoint: 0.0.0.0:9411
    service:
      extensions:
        - health_check
        - pprof
        - zpages
      pipelines:
        metrics:
          exporters:
            - logging
          processors:
            - batch
          receivers:
            - otlp
            - prometheus
        traces:
          exporters:
            - logging
          processors:
            - batch
          receivers:
            - otlp
            - jaeger
            - zipkin
  configVersions: 3
  daemonSetUpdateStrategy: {}
  deploymentUpdateStrategy: {}
  ingress:
    route: {}
  ipFamilyPolicy: SingleStack
  managementState: managed
  mode: daemonset
  observability:
    metrics: {}
  podDnsConfig: {}
  replicas: 1
  resources: {}
  targetAllocator:
    allocationStrategy: consistent-hashing
    filterStrategy: relabel-config
    observability:
      metrics: {}
    prometheusCR:
      scrapeInterval: 30s
    resources: {}
  upgradeStrategy: automatic
